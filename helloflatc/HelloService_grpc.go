//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: hello

package helloflatc

import (
	context "context"
	flatbuffers "github.com/google/flatbuffers/go"
	grpc "google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Client API for HelloService service
type HelloServiceClient interface {
	SayHello(ctx context.Context, in *flatbuffers.Builder,
		opts ...grpc.CallOption) (*HelloReply, error)
	Read(ctx context.Context, in *flatbuffers.Builder,
		opts ...grpc.CallOption) (*ReadReply, error)
	Write(ctx context.Context, in *flatbuffers.Builder,
		opts ...grpc.CallOption) (*WriteReply, error)
	ReadStream(ctx context.Context,
		opts ...grpc.CallOption) (HelloService_ReadStreamClient, error)
	WriteStream(ctx context.Context,
		opts ...grpc.CallOption) (HelloService_WriteStreamClient, error)
}

type helloServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloServiceClient(cc grpc.ClientConnInterface) HelloServiceClient {
	return &helloServiceClient{cc}
}

func (c *helloServiceClient) SayHello(ctx context.Context, in *flatbuffers.Builder,
	opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/helloflatc.HelloService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloServiceClient) Read(ctx context.Context, in *flatbuffers.Builder,
	opts ...grpc.CallOption) (*ReadReply, error) {
	out := new(ReadReply)
	err := c.cc.Invoke(ctx, "/helloflatc.HelloService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloServiceClient) Write(ctx context.Context, in *flatbuffers.Builder,
	opts ...grpc.CallOption) (*WriteReply, error) {
	out := new(WriteReply)
	err := c.cc.Invoke(ctx, "/helloflatc.HelloService/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloServiceClient) ReadStream(ctx context.Context,
	opts ...grpc.CallOption) (HelloService_ReadStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[0], "/helloflatc.HelloService/ReadStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceReadStreamClient{stream}
	return x, nil
}

type HelloService_ReadStreamClient interface {
	Send(*flatbuffers.Builder) error
	Recv() (*ReadReply, error)
	grpc.ClientStream
}

type helloServiceReadStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceReadStreamClient) Send(m *flatbuffers.Builder) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServiceReadStreamClient) Recv() (*ReadReply, error) {
	m := new(ReadReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServiceClient) WriteStream(ctx context.Context,
	opts ...grpc.CallOption) (HelloService_WriteStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[1], "/helloflatc.HelloService/WriteStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceWriteStreamClient{stream}
	return x, nil
}

type HelloService_WriteStreamClient interface {
	Send(*flatbuffers.Builder) error
	Recv() (*WriteReply, error)
	grpc.ClientStream
}

type helloServiceWriteStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceWriteStreamClient) Send(m *flatbuffers.Builder) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServiceWriteStreamClient) Recv() (*WriteReply, error) {
	m := new(WriteReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for HelloService service
type HelloServiceServer interface {
	SayHello(context.Context, *HelloRequest) (*flatbuffers.Builder, error)
	Read(context.Context, *ReadRequest) (*flatbuffers.Builder, error)
	Write(context.Context, *WriteRequest) (*flatbuffers.Builder, error)
	ReadStream(HelloService_ReadStreamServer) error
	WriteStream(HelloService_WriteStreamServer) error
	mustEmbedUnimplementedHelloServiceServer()
}

type UnimplementedHelloServiceServer struct {
}

func (UnimplementedHelloServiceServer) SayHello(context.Context, *HelloRequest) (*flatbuffers.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}

func (UnimplementedHelloServiceServer) Read(context.Context, *ReadRequest) (*flatbuffers.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}

func (UnimplementedHelloServiceServer) Write(context.Context, *WriteRequest) (*flatbuffers.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}

func (UnimplementedHelloServiceServer) ReadStream(HelloService_ReadStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadStream not implemented")
}

func (UnimplementedHelloServiceServer) WriteStream(HelloService_WriteStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteStream not implemented")
}

func (UnimplementedHelloServiceServer) mustEmbedUnimplementedHelloServiceServer() {}

type UnsafeHelloServiceServer interface {
	mustEmbedUnimplementedHelloServiceServer()
}

func RegisterHelloServiceServer(s grpc.ServiceRegistrar, srv HelloServiceServer) {
	s.RegisterService(&_HelloService_serviceDesc, srv)
}

func _HelloService_SayHello_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloflatc.HelloService/SayHello",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func _HelloService_Read_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloflatc.HelloService/Read",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func _HelloService_Write_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloflatc.HelloService/Write",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func _HelloService_ReadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServiceServer).ReadStream(&helloServiceReadStreamServer{stream})
}

type HelloService_ReadStreamServer interface {
	Send(*flatbuffers.Builder) error
	Recv() (*ReadRequest, error)
	grpc.ServerStream
}

type helloServiceReadStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceReadStreamServer) Send(m *flatbuffers.Builder) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServiceReadStreamServer) Recv() (*ReadRequest, error) {
	m := new(ReadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloService_WriteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServiceServer).WriteStream(&helloServiceWriteStreamServer{stream})
}

type HelloService_WriteStreamServer interface {
	Send(*flatbuffers.Builder) error
	Recv() (*WriteRequest, error)
	grpc.ServerStream
}

type helloServiceWriteStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceWriteStreamServer) Send(m *flatbuffers.Builder) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServiceWriteStreamServer) Recv() (*WriteRequest, error) {
	m := new(WriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HelloService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloflatc.HelloService",
	HandlerType: (*HelloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _HelloService_SayHello_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _HelloService_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _HelloService_Write_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadStream",
			Handler:       _HelloService_ReadStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WriteStream",
			Handler:       _HelloService_WriteStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
